* Anna's Advent of Code Repo

This repo contains my attempts to gain all stars on all AoC challenges,
including the historical ones.

I started doing AoC in 2021, with AoC 2021, and in 2022 i begin trying all of the old puzzles

The language i will be using is C, mainly because its an interesting challenge and I like working with it

** 2015
*** Puzzle 1

- Nice easy intro as expected

*** Puzzle 2

- Fairly easy puzzle

*** Puzzle 3

- Nice easy puzzle again, my solution could probably be made faster
  with some sort of hash map rather than a linked list, although it
  may not be worth it, since its very fast anyway

*** Puzzle 4

- why does the MD5 function from the crypto library store its strings as unsigned char*
- part 2 was literally the same i just changed a 5 to a 6

*** Puzzle 5

- fun and easy string comp puzzle

*** Puzzle 6

- a nice puzzle, again with a dissapointing part 2, it was basically the same thing, but with a trivial change, similar to puzzle 4

*** Puzzle 7

- another really fun puzzle, best so far of this year, was fun essentially building a very rudimentary parser
- struggled with part 2, due to some ambiguity with the puzzle question
- overall good though, although my code is definitely over-engineered

** 2016
** 2017
** 2018
** 2019
** 2020
** 2021
*** Puzzle 1

- Fairly easy puzzle today, a nice intro

*** Puzzle 2

- Slightly more challenging today
- Had some memory management troubles today

*** Puzzle 3

- Screwed up some memory management again today, not the easiest fix

*** Puzzle 4

- I had massive memory management issues again today, lots of strange
behaviours, in the end the final bug was missing a blindingly obvious logical
oversight

*** Puzzle 5

- No memory management issues today :)
- A fairly nice puzzle, made some structs for an easier time, helped a lot

*** Puzzle 6

- Used a nice linked list implementation for part 1,
- linked list iteration did not scale well to part 2, so i implemented a
smarter strategy for part 2

*** Puzzle 7

- Got a little stuck with the 2nd part today, but was right about mean
being correct, turns out to +/- 0.5, so i needed to check and input both

*** Puzzle 8

- part 1 was very easy
- part 2 took me ages, working out the logic and then i had quite a few bugs
suprisingly though, none were memory management related
- this is the first day that im not finishing on the day of its release

*** Puzzle 9

- not too bad today, part 1 was very easy
- i spent ages overengineering a solution for part 2 that ended up not working.
- another linked list implementation

*** Puzzle 10

- fairly easy today, wrote a nice stack based implementation that worked for
both parts, with only minor tweaks for part 2
- spent a while on part 2 fixing an overflow, due to the values overflowing
an int

*** Puzzle 11

- easiest day for a while, the diff between part 1 and 2 is like a few lines
almost overengineered a solution with a queue of flashed octopi but the puzzle
input is only 10*10 so its really unessecary.

*** Puzzle 12

- medium difficulty today, took a while to get going
- used a linked list for the working and finished paths, and then inside them a
fixed length string which i just made large enough to always hold the maximum
path length
- had issues with time to completion on the second one, forgot i put the while
loop in that traverses the entire linked list for debugging purposes. i had
removed the printf
but left the loop in, and after that it completed in about 2s

*** Puzzle 13

- Fairly easy day today, part 1 was harder than part 2, but was a fairly nice
solution
- due to the way i solved it, the hardest part of part 2 was reading the letters
from the output to my terminal

*** Puzzle 14

- Another challenge of scaling today, first solution was quite easy, made a doubling
dynamic length string where when it reaches the end it reallocs 2x the memory for that
- This solution would not have worked for part 2 due to the time and space complexity
so instead i used a system in which i keep track of all current pairs and how many times
each letter has occured.
- we keep track of occuring letters seperately since its easier than figuring it out
by looking at the head of each pair or something like that.

*** Puzzle 15

- no

*** Puzzle 16

- Enjoyable puzzle today, had some silent overflowing issues though :/

*** Puzzle 17

- Fairly easy day today, one i stopped overengineering and looking for a smart
solution that would allow me to automatically stop searching when i know an x
value wont have any more working y values, to just search all of them since its
actually not that many (i overscoped and did x: -1000 -> 1000 and y: 0 -> 1000)

- For part 2, i just removed some lines and added a counter.

*** Puzzle 18

- Stopped after quite a few hours, no longer found it fun.
- Did not complete part 1

*** Puzzle 19

- The End. I did not attempt this day due to travelling home, and i have decided
that i no longer wish to participate in AoC 2021 due to other commitments in my life
becoming more important, and requiring my time.

*** Closing Thoughts

- Doing it in C was a fun challenge, and i got a lot better at C during this year,
- Was definitely a worthwhile experience, and exposed some flaws in my knowledge
(i am looking at you, min heaps from day 15).
